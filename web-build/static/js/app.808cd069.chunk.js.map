{"version":3,"sources":["utils/course.js","components/Course.js","components/CourseSelector.js","components/TermSelector.js","components/CourseList.js","App.js"],"names":["termMap","F","W","S","terms","Object","values","getCourseTerm","course","id","charAt","allDays","timesPat","timeConflict","course1","course2","days1","days","days2","some","day","includes","hours1","hours","hours2","Math","max","start","min","end","hasConflict","selected","filter","meets","exec","match","hh1","mm1","hh2","mm2","addTimes","selection","courseButtonBase","flex","borderRadius","justifyContent","alignItems","margin","height","padding","minWidth","maxWidth","styles","StyleSheet","create","courseButton","backgroundColor","courseButtonDisabled","courseButtonSelected","courseText","color","fontSize","textAlign","Course","isDisabled","isSelected","select","TouchableOpacity","style","onPress","Text","slice","getCourseNumber","courseList","flexDirection","flexWrap","CourseSelector","courses","useState","setSelected","toggle","x","View","map","key","TermButton","term","setSelectedTerm","isActive","termText","termButtonBase","termSelector","width","termButton","termButtonActive","TermSelector","selectedTerm","CourseList","termCourses","ScrollView","Banner","title","bannerStyle","container","paddingTop","App","schedule","setSchedule","useEffect","a","async","fetch","response","ok","json","fetchSchedule","SafeAreaView"],"mappings":"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","file":"static/js/app.808cd069.chunk.js","sourcesContent":["// getCourseTerm(course) => string\r\n//   given a course, returns the term the course is in\r\n//\r\n// getCourseNumber(course) => string\r\n//   given a course, returns its course number\r\n//\r\n// terms -- a variable set to the list of academic terms\r\nconst termMap = { F: 'Fall', W: 'Winter', S: 'Spring'};\r\nconst terms = Object.values(termMap);\r\n\r\n\r\nconst getCourseTerm = course => (\r\n  termMap[course.id.charAt(0)]\r\n);\r\n\r\nconst getCourseNumber = course => (\r\n  course.id.slice(1)\r\n)\r\n\r\n// addTimes(course) => void\r\n//   given a course with a meeting time, e.g., \"MTuWF 9:00-10:30\"\r\n//   adds a days value, e.g., [\"M\", \"Tu\", \"W\", \"F\"]\r\n//     and an hours value, e.g., { start: 540, end: 630 },\r\n//     with start and end in minutes past midnight\r\n\r\nconst allDays = ['M', 'Tu', 'W', 'Th', 'F', 'Sa', 'Su'];\r\nconst timesPat = /(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d)/;\r\n\r\nconst addTimes = (course) => {\r\n  course.days = allDays.filter(day => course.meets.includes(day));\r\n\r\n  const [match, hh1, mm1, hh2, mm2] = timesPat.exec(course.meets);\r\n  if (match) {\r\n    course.hours = {\r\n      start: hh1 * 60 + mm1 * 1,\r\n      end: hh2 * 60 + mm2 * 1\r\n    }\r\n  };\r\n}\r\n\r\n// hasConflict(course, selected) => boolean\r\n//   given a course and list of courses\r\n//   returns true if course conflicts with any item in selected\r\n//\r\n// courseConflict(course1, course1) => boolean\r\n//   given two courses\r\n//   returns if they are not the same course, occur in the\r\n//     same quarter, have at least one day in common, and\r\n//     the start/end times overlap\r\n\r\nconst daysOverlap = (days1, days2) => (\r\n  days1 && days2 && days2.some(day => days1.includes(day))\r\n);\r\n\r\nconst hoursOverlap = (hours1, hours2) => (\r\n  hours1 && hours2 && Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end)\r\n);\r\n\r\nconst timeConflict = (course1, course2) => (\r\n  daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours)\r\n);\r\n\r\nconst courseConflict = (course1, course2) => (\r\n  course1 !== course2\r\n  && getCourseTerm(course1) === getCourseTerm(course2)\r\n  && timeConflict(course1, course2)\r\n);\r\n\r\n// SIDE EFFECT: the first time a course is compared to other courses,\r\n// its meeting times are parsed and added, so that this work\r\n// doesn't need to be done again. Clear the days field if\r\n// changing meeting times.\r\nconst hasConflict = (course, selected) => {\r\n  if (!course.days) addTimes(course);\r\n  return selected.some(selection => courseConflict(course, selection))\r\n};\r\n\r\nexport { getCourseNumber, getCourseTerm, hasConflict, terms }\r\n","import React from 'react';\r\nimport { StyleSheet, Text, TouchableOpacity } from 'react-native';\r\nimport { getCourseNumber } from '../utils/course';\r\n\r\nconst Course = ({course, isDisabled, isSelected, select}) => (\r\n  <TouchableOpacity style={styles[isSelected ? 'courseButtonSelected' : isDisabled ? 'courseButtonDisabled' : 'courseButton']}\r\n      onPress={() => {if (!isDisabled) select(course);}}>\r\n    <Text style={styles.courseText}>\r\n      {`CS ${getCourseNumber(course)}\\n${course.meets}`}\r\n    </Text>\r\n  </TouchableOpacity>\r\n);\r\n\r\nconst courseButtonBase = {\r\n  flex: 1,\r\n  borderRadius: 5,\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  margin: 10,\r\n  height: 60,\r\n  padding: 10,\r\n  minWidth: 90,\r\n  maxWidth: 90,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  courseButton: {\r\n    ...courseButtonBase,\r\n    backgroundColor: '#66b0ff',\r\n  },\r\n  courseButtonDisabled: {\r\n    ...courseButtonBase,\r\n    backgroundColor: '#d3d3d3',\r\n  },\r\n  courseButtonSelected: {\r\n    ...courseButtonBase,\r\n    backgroundColor: '#004a99',\r\n  },\r\n  courseText:{\r\n    color: '#fff',\r\n    fontSize: 12,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default Course;\r\n","import React, { useState } from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport Course from './Course';\r\nimport { hasConflict } from '../utils/course';\r\n\r\nconst CourseSelector = ({courses}) => {\r\n  const [selected, setSelected] = useState([]);\r\n\r\n// come back and understand this\r\n  const toggle = course => setSelected(selected => (\r\n    selected.includes(course) ? selected.filter(x => x !== course) : [...selected, course]\r\n  ));\r\n\r\n  return (\r\n    <View style={styles.courseList}>\r\n      {\r\n        courses.map(course => (\r\n          <Course key={course.id} course={course}\r\n          isDisabled={hasConflict(course, selected)}\r\n          isSelected={selected.includes(course)}\r\n          select={toggle} />\r\n        ))\r\n      }\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  courseList: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  },\r\n});\r\n\r\nexport default CourseSelector;\r\n","import React from 'react';\r\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\r\nimport { terms } from '../utils/course';\r\n\r\nconst TermButton = ({term, setSelectedTerm, isActive}) => (\r\n  <TouchableOpacity style={styles[isActive ? 'termButtonActive' : 'termButton']}\r\n      onPress={() => setSelectedTerm(term)}>\r\n    <Text style={styles.termText}>{term}</Text>\r\n  </TouchableOpacity>\r\n);\r\n\r\nconst TermSelector = ({selectedTerm, setSelectedTerm}) => (\r\n  <View style={styles.termSelector}>\r\n    {\r\n      terms.map(term => (\r\n        <TermButton key={term} term={term} setSelectedTerm={setSelectedTerm}\r\n        isActive={term === selectedTerm}\r\n        />\r\n      ))\r\n    }\r\n  </View>\r\n);\r\n\r\nconst termButtonBase = {\r\n  flex: 1,\r\n  borderRadius: 5,\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  margin: 10,\r\n  height: 40,\r\n  padding: 10,\r\n  minWidth: 90,\r\n  maxWidth: 90,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  termSelector: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    width: 350,\r\n  },\r\n  termButton: {\r\n    ...termButtonBase,\r\n    backgroundColor: '#4f9f64',\r\n  },\r\n  termText: {\r\n    color: '#fff',\r\n    fontSize: 15,\r\n  },\r\n  termButtonActive: {\r\n  ...termButtonBase,\r\n  backgroundColor: '#105f25',\r\n  },\r\n});\r\n\r\nexport default TermSelector;\r\n","import React, { useState } from 'react';\r\nimport { ScrollView } from 'react-native';\r\nimport Course from './Course';\r\nimport CourseSelector from './CourseSelector';\r\nimport TermSelector from './TermSelector';\r\nimport { getCourseTerm } from '../utils/course';\r\n\r\nconst CourseList = ({courses}) => {\r\n  const [selectedTerm, setSelectedTerm] = useState('Fall');\r\n  const termCourses = courses.filter(course => selectedTerm === getCourseTerm(course));\r\n  return (\r\n    <ScrollView>\r\n      <TermSelector selectedTerm={selectedTerm} setSelectedTerm={setSelectedTerm} />\r\n      <CourseSelector courses={termCourses} />\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nexport default CourseList;\r\n","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, SafeAreaView } from 'react-native';\nimport CourseList from './components/CourseList';\n\nconst Banner = ({title}) => (\n  <Text style={styles.bannerStyle}>{title || '[loading...]'}</Text>\n);\n\nconst App = () => {\n  const [schedule, setSchedule] = useState({title: '', courses: []});\n\n  const url = 'https://courses.cs.northwestern.edu/394/data/cs-courses.php';\n\n  useEffect(() => {\n    const fetchSchedule = async () => {\n    const response = await fetch(url);\n      if (!response.ok) throw response;\n      const json = await response.json();\n      setSchedule(json);\n    }\n    fetchSchedule();\n  }, []); // the empty list is to ensure data is not fetched every re-render\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Banner title={schedule.title} />\n      <CourseList courses={schedule.courses} />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: 20, //change back to 20\n  },\n  bannerStyle: {\n    color: '#888',\n    fontSize: 32,\n  },\n});\n\nexport default App;\n"],"sourceRoot":""}