{"version":3,"sources":["components/Course.js","components/TermSelector.js","components/CourseList.js","App.js"],"names":["styles","StyleSheet","create","courseButton","flex","borderRadius","justifyContent","alignItems","margin","height","padding","minWidth","maxWidth","backgroundColor","courseText","color","fontSize","textAlign","Course","course","TouchableOpacity","style","Text","id","slice","getCourseNumber","meets","TermButton","term","setSelectedTerm","isActive","onPress","termText","termButtonBase","termSelector","flexDirection","width","termButton","termButtonActive","TermSelector","terms","selectedTerm","View","map","key","termMap","F","W","S","Object","values","courseList","flexWrap","CourseList","courses","useState","termCourses","filter","charAt","getCourseTerm","ScrollView","Banner","title","bannerStyle","container","paddingTop","App","schedule","setSchedule","useEffect","a","async","fetch","response","ok","json","fetchSchedule","SafeAreaView"],"mappings":"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","file":"static/js/app.842c65f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Text, TouchableOpacity } from 'react-native';\r\n\r\nconst getCourseNumber = course => (\r\n  course.id.slice(1)\r\n);\r\n\r\nconst Course = ({course}) => (\r\n  <TouchableOpacity style={styles.courseButton}>\r\n    <Text style={styles.courseText}>\r\n      {`CS ${getCourseNumber(course)}\\n${course.meets}`}\r\n    </Text>\r\n  </TouchableOpacity>\r\n);\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  courseButton: {\r\n    flex: 1,\r\n    borderRadius: 5,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    margin: 10,\r\n    height: 60,\r\n    padding: 10,\r\n    minWidth: 90,\r\n    maxWidth: 90,\r\n    backgroundColor: '#66b0ff',\r\n  },\r\n  courseText:{\r\n    color: '#fff',\r\n    fontSize: 12,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default Course;\r\n","import React from 'react';\r\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\r\n\r\nconst TermButton = ({term, setSelectedTerm, isActive}) => (\r\n  <TouchableOpacity style={styles[isActive ? 'termButtonActive' : 'termButton']}\r\n      onPress={() => setSelectedTerm(term)}>\r\n    <Text style={styles.termText}>{term}</Text>\r\n  </TouchableOpacity>\r\n);\r\n\r\nconst TermSelector = ({terms, selectedTerm, setSelectedTerm}) => (\r\n  <View style={styles.termSelector}>\r\n    {\r\n      terms.map(term => (\r\n        <TermButton key={term} term={term} setSelectedTerm={setSelectedTerm}\r\n        isActive={term === selectedTerm}\r\n        />\r\n      ))\r\n    }\r\n  </View>\r\n);\r\n\r\nconst termButtonBase = {\r\n  flex: 1,\r\n  borderRadius: 5,\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  margin: 10,\r\n  height: 40,\r\n  padding: 10,\r\n  minWidth: 90,\r\n  maxWidth: 90,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  termSelector: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    width: 350,\r\n  },\r\n  termButton: {\r\n    ...termButtonBase,\r\n    backgroundColor: '#4f9f64',\r\n  },\r\n  termText: {\r\n    color: '#fff',\r\n    fontSize: 15,\r\n  },\r\n  termButtonActive: {\r\n  ...termButtonBase,\r\n  backgroundColor: '#105f25',\r\n  },\r\n});\r\n\r\nexport default TermSelector;\r\n","import React, { useState } from 'react';\r\nimport { StyleSheet, View, ScrollView } from 'react-native';\r\nimport Course from './Course';\r\nimport TermSelector from './TermSelector';\r\n\r\nconst termMap = { F: 'Fall', W: 'Winter', S: 'Spring'};\r\nconst terms = Object.values(termMap);\r\n\r\nconst getCourseTerm = course => (\r\n  termMap[course.id.charAt(0)]\r\n);\r\n\r\nconst CourseList = ({courses}) => {\r\n  const [selectedTerm, setSelectedTerm] = useState('Fall');\r\n  const termCourses = courses.filter(course => selectedTerm === getCourseTerm(course));\r\n  return (\r\n    <View>\r\n      <TermSelector terms={terms} selectedTerm={selectedTerm}\r\n        setSelectedTerm={setSelectedTerm}\r\n      />\r\n      <ScrollView>\r\n        <View style={styles.courseList}>\r\n          { termCourses.map(course => <Course key={course.id} course={course} />) }\r\n        </View>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  courseList: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  },\r\n});\r\n\r\nexport default CourseList;\r\n","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, SafeAreaView } from 'react-native';\nimport CourseList from './components/CourseList';\n\nconst Banner = ({title}) => (\n  <Text style={styles.bannerStyle}>{title || '[loading...]'}</Text>\n);\n\nconst App = () => {\n  const [schedule, setSchedule] = useState({title: '', courses: []});\n\n  const url = 'https://courses.cs.northwestern.edu/394/data/cs-courses.php';\n\n  useEffect(() => {\n    const fetchSchedule = async () => {\n    const response = await fetch(url);\n      if (!response.ok) throw response;\n      const json = await response.json();\n      setSchedule(json);\n    }\n    fetchSchedule();\n  }, []); // the empty list is to ensure data is not fetched every re-render\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Banner title={schedule.title} />\n      <CourseList courses={schedule.courses} />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: 20,\n  },\n  bannerStyle: {\n    color: '#888',\n    fontSize: 32,\n  },\n});\n\nexport default App;\n"],"sourceRoot":""}