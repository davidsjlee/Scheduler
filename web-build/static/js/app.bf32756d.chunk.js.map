{"version":3,"sources":["utils/course.js","components/Course.js","components/CourseSelector.js","components/TermSelector.js","components/CourseList.js","screens/ScheduleScreen.js","screens/CourseDetailScreen.js","App.js"],"names":["termMap","F","W","S","terms","Object","values","getCourseTerm","course","id","charAt","allDays","timesPat","timeConflict","course1","course2","days1","days","days2","some","day","includes","hours1","hours","hours2","Math","max","start","min","end","hasConflict","selected","filter","meets","exec","match","hh1","mm1","hh2","mm2","addTimes","selection","courseButtonBase","flex","borderRadius","justifyContent","alignItems","margin","height","padding","minWidth","maxWidth","styles","StyleSheet","create","courseButton","backgroundColor","courseButtonDisabled","courseButtonSelected","courseText","color","fontSize","textAlign","Course","isDisabled","isSelected","select","view","TouchableOpacity","style","onPress","onLongPress","Text","slice","getCourseNumber","courseList","flexDirection","flexWrap","CourseSelector","courses","useState","setSelected","toggle","x","View","map","key","TermButton","term","setSelectedTerm","isActive","termText","termButtonBase","termSelector","width","termButton","termButtonActive","TermSelector","selectedTerm","CourseList","termCourses","ScrollView","Banner","title","bannerStyle","container","paddingTop","ScheduleScreen","navigation","schedule","setSchedule","useEffect","a","async","fetch","response","ok","json","fetchSchedule","SafeAreaView","error","navigate","Field","label","field","fieldContainer","marginBottom","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","fontWeight","CourseDetailScreen","route","params","Stack","createStackNavigator","App","NavigationContainer","Navigator","Screen","name","component","options"],"mappings":"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","file":"static/js/app.bf32756d.chunk.js","sourcesContent":["// getCourseTerm(course) => string\r\n//   given a course, returns the term the course is in\r\n//\r\n// getCourseNumber(course) => string\r\n//   given a course, returns its course number\r\n//\r\n// terms -- a variable set to the list of academic terms\r\nconst termMap = { F: 'Fall', W: 'Winter', S: 'Spring'};\r\nconst terms = Object.values(termMap);\r\n\r\n\r\nconst getCourseTerm = course => (\r\n  termMap[course.id.charAt(0)]\r\n);\r\n\r\nconst getCourseNumber = course => (\r\n  course.id.slice(1)\r\n)\r\n\r\n// addTimes(course) => void\r\n//   given a course with a meeting time, e.g., \"MTuWF 9:00-10:30\"\r\n//   adds a days value, e.g., [\"M\", \"Tu\", \"W\", \"F\"]\r\n//     and an hours value, e.g., { start: 540, end: 630 },\r\n//     with start and end in minutes past midnight\r\n\r\nconst allDays = ['M', 'Tu', 'W', 'Th', 'F', 'Sa', 'Su'];\r\nconst timesPat = /(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d)/;\r\n\r\nconst addTimes = (course) => {\r\n  course.days = allDays.filter(day => course.meets.includes(day));\r\n\r\n  const [match, hh1, mm1, hh2, mm2] = timesPat.exec(course.meets);\r\n  if (match) {\r\n    course.hours = {\r\n      start: hh1 * 60 + mm1 * 1,\r\n      end: hh2 * 60 + mm2 * 1\r\n    }\r\n  };\r\n}\r\n\r\n// hasConflict(course, selected) => boolean\r\n//   given a course and list of courses\r\n//   returns true if course conflicts with any item in selected\r\n//\r\n// courseConflict(course1, course1) => boolean\r\n//   given two courses\r\n//   returns if they are not the same course, occur in the\r\n//     same quarter, have at least one day in common, and\r\n//     the start/end times overlap\r\n\r\nconst daysOverlap = (days1, days2) => (\r\n  days1 && days2 && days2.some(day => days1.includes(day))\r\n);\r\n\r\nconst hoursOverlap = (hours1, hours2) => (\r\n  hours1 && hours2 && Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end)\r\n);\r\n\r\nconst timeConflict = (course1, course2) => (\r\n  daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours)\r\n);\r\n\r\nconst courseConflict = (course1, course2) => (\r\n  course1 !== course2\r\n  && getCourseTerm(course1) === getCourseTerm(course2)\r\n  && timeConflict(course1, course2)\r\n);\r\n\r\n// SIDE EFFECT: the first time a course is compared to other courses,\r\n// its meeting times are parsed and added, so that this work\r\n// doesn't need to be done again. Clear the days field if\r\n// changing meeting times.\r\nconst hasConflict = (course, selected) => {\r\n  if (!course.days) addTimes(course);\r\n  return selected.some(selection => courseConflict(course, selection))\r\n};\r\n\r\nexport { getCourseNumber, getCourseTerm, hasConflict, terms }\r\n","import React from 'react';\r\nimport { StyleSheet, Text, TouchableOpacity } from 'react-native';\r\nimport { getCourseNumber } from '../utils/course';\r\n\r\nconst Course = ({course, isDisabled, isSelected, select, view}) => (\r\n  <TouchableOpacity style={styles[isSelected ? 'courseButtonSelected' : isDisabled ? 'courseButtonDisabled' : 'courseButton']}\r\n      onPress={() => {if (!isDisabled) select(course);}}\r\n      onLongPress={() => view(course)}>\r\n    <Text style={styles.courseText}>\r\n      {`CS ${getCourseNumber(course)}\\n${course.meets}`}\r\n    </Text>\r\n  </TouchableOpacity>\r\n);\r\n\r\nconst courseButtonBase = {\r\n  flex: 1,\r\n  borderRadius: 5,\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  margin: 10,\r\n  height: 60,\r\n  padding: 10,\r\n  minWidth: 90,\r\n  maxWidth: 90,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  courseButton: {\r\n    ...courseButtonBase,\r\n    backgroundColor: '#66b0ff',\r\n  },\r\n  courseButtonDisabled: {\r\n    ...courseButtonBase,\r\n    backgroundColor: '#d3d3d3',\r\n  },\r\n  courseButtonSelected: {\r\n    ...courseButtonBase,\r\n    backgroundColor: '#004a99',\r\n  },\r\n  courseText:{\r\n    color: '#fff',\r\n    fontSize: 12,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default Course;\r\n","import React, { useState } from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport Course from './Course';\r\nimport { hasConflict } from '../utils/course';\r\n\r\nconst CourseSelector = ({courses, view}) => {\r\n  const [selected, setSelected] = useState([]);\r\n\r\n// come back and understand this\r\n  const toggle = course => setSelected(selected => (\r\n    selected.includes(course) ? selected.filter(x => x !== course) : [...selected, course]\r\n  ));\r\n\r\n  return (\r\n    <View style={styles.courseList}>\r\n      {\r\n        courses.map(course => (\r\n          <Course key={course.id} course={course}\r\n          isDisabled={hasConflict(course, selected)}\r\n          isSelected={selected.includes(course)}\r\n          select={toggle}\r\n          view={view} />\r\n        ))\r\n      }\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  courseList: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  },\r\n});\r\n\r\nexport default CourseSelector;\r\n","import React from 'react';\r\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\r\nimport { terms } from '../utils/course';\r\n\r\nconst TermButton = ({term, setSelectedTerm, isActive}) => (\r\n  <TouchableOpacity style={styles[isActive ? 'termButtonActive' : 'termButton']}\r\n      onPress={() => setSelectedTerm(term)}>\r\n    <Text style={styles.termText}>{term}</Text>\r\n  </TouchableOpacity>\r\n);\r\n\r\nconst TermSelector = ({selectedTerm, setSelectedTerm}) => (\r\n  <View style={styles.termSelector}>\r\n    {\r\n      terms.map(term => (\r\n        <TermButton key={term} term={term} setSelectedTerm={setSelectedTerm}\r\n        isActive={term === selectedTerm}\r\n        />\r\n      ))\r\n    }\r\n  </View>\r\n);\r\n\r\nconst termButtonBase = {\r\n  flex: 1,\r\n  borderRadius: 5,\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  margin: 10,\r\n  height: 40,\r\n  padding: 10,\r\n  minWidth: 90,\r\n  maxWidth: 90,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  termSelector: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    width: 350,\r\n  },\r\n  termButton: {\r\n    ...termButtonBase,\r\n    backgroundColor: '#4f9f64',\r\n  },\r\n  termText: {\r\n    color: '#fff',\r\n    fontSize: 15,\r\n  },\r\n  termButtonActive: {\r\n  ...termButtonBase,\r\n  backgroundColor: '#105f25',\r\n  },\r\n});\r\n\r\nexport default TermSelector;\r\n","import React, { useState } from 'react';\r\nimport { ScrollView } from 'react-native';\r\nimport Course from './Course';\r\nimport CourseSelector from './CourseSelector';\r\nimport TermSelector from './TermSelector';\r\nimport { getCourseTerm } from '../utils/course';\r\n\r\nconst CourseList = ({courses, view}) => {\r\n  const [selectedTerm, setSelectedTerm] = useState('Fall');\r\n  const termCourses = courses.filter(course => selectedTerm === getCourseTerm(course));\r\n  return (\r\n    <ScrollView>\r\n      <TermSelector selectedTerm={selectedTerm} setSelectedTerm={setSelectedTerm} />\r\n      <CourseSelector courses={termCourses} view={view} />\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nexport default CourseList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, SafeAreaView } from 'react-native';\r\nimport CourseList from '../components/CourseList';\r\n\r\nconst Banner = ({title}) => (\r\n  <Text style={styles.bannerStyle}>{title || '[loading...]'}</Text>\r\n);\r\n\r\nconst ScheduleScreen = ({navigation}) => {\r\n  const [schedule, setSchedule] = useState({title: '', courses: []});\r\n\r\n  const view = (course) => {\r\n    navigation.navigate('CourseDetailScreen', { course });\r\n  };\r\n\r\n  const url = 'https://courses.cs.northwestern.edu/394/data/cs-courses.php';\r\n\r\n  useEffect(() => {\r\n    const fetchSchedule = async () => {\r\n    const response = await fetch(url);\r\n      if (!response.ok) throw response;\r\n      const json = await response.json();\r\n      setSchedule(json);\r\n    }\r\n    fetchSchedule();\r\n  }, []); // the empty list is to ensure data is not fetched every re-render\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <Banner title={schedule.title} error={schedule.error} />\r\n      <CourseList courses={schedule.courses} view={view} />\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    paddingTop: 20, //change back to 20\r\n  },\r\n  bannerStyle: {\r\n    color: '#888',\r\n    fontSize: 32,\r\n  },\r\n});\r\n\r\nexport default ScheduleScreen;\r\n","import React from 'react';\r\nimport { SafeAreaView, ScrollView, StyleSheet, Text, View } from 'react-native';\r\n\r\nconst Field = ({label, field}) => {\r\n  return (\r\n    <View style={styles.fieldContainer}>\r\n      <Text style={styles.label}>{label}</Text>\r\n      <Text style={styles.field}>{field}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst CourseDetailScreen = ({route}) => {\r\n  //hardcode for now\r\n  const course = route.params.course;\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <ScrollView>\r\n        <Field label=\"ID\" field={course.id} />\r\n        <Field label=\"Meeting times\" field={course.meets} />\r\n        <Field label=\"Title\" field={course.title} />\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: '#ccccb3'\r\n  },\r\n  field: {\r\n    height: 40,\r\n    width: 300,\r\n    padding: 5,\r\n    backgroundColor: 'white',\r\n  },\r\n  fieldContainer: {\r\n    marginBottom: 20,\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.23,\r\n    shadowRadius: 2.62,\r\n    elevation: 4,\r\n  },\r\n  label: {\r\n    fontWeight: 'bold',\r\n  }\r\n});\r\n\r\nexport default CourseDetailScreen;\r\n","import 'react-native-gesture-handler';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport ScheduleScreen from './screens/ScheduleScreen';\nimport CourseDetailScreen from './screens/CourseDetailScreen';\n\nconst Stack = createStackNavigator();\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"ScheduleScreen\"\n          component={ScheduleScreen}\n          options={{ title: 'Schedule' }} />\n        <Stack.Screen name=\"CourseDetailScreen\"\n          component={CourseDetailScreen}\n          options={{ title: 'Course detail' }} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}